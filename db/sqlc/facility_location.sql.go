// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: facility_location.sql

package db

import (
	"context"
)

const createFacilityLocation = `-- name: CreateFacilityLocation :one
INSERT INTO facility_locations (name, facility_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, name, facility_id
`

type CreateFacilityLocationParams struct {
	Name       string `json:"name"`
	FacilityID int64  `json:"facility_id"`
}

// description: Create a new location within a facility
func (q *Queries) CreateFacilityLocation(ctx context.Context, arg CreateFacilityLocationParams) (FacilityLocation, error) {
	row := q.db.QueryRowContext(ctx, createFacilityLocation, arg.Name, arg.FacilityID)
	var i FacilityLocation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.FacilityID,
	)
	return i, err
}

const getFacilityLocation = `-- name: GetFacilityLocation :one
SELECT id, created_at, updated_at, name, facility_id
FROM facility_locations
WHERE id = $1
`

// description: Get a location within a facility by ID
func (q *Queries) GetFacilityLocation(ctx context.Context, id int64) (FacilityLocation, error) {
	row := q.db.QueryRowContext(ctx, getFacilityLocation, id)
	var i FacilityLocation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.FacilityID,
	)
	return i, err
}

const listFacilityLocations = `-- name: ListFacilityLocations :many
SELECT id, created_at, updated_at, name, license_number
FROM facilities
`

// description: List all locations within facilities
func (q *Queries) ListFacilityLocations(ctx context.Context) ([]Facility, error) {
	rows, err := q.db.QueryContext(ctx, listFacilityLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Facility{}
	for rows.Next() {
		var i Facility
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.LicenseNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFacilityLocationsByFacility = `-- name: ListFacilityLocationsByFacility :many
SELECT id, created_at, updated_at, name, facility_id
FROM facility_locations
WHERE facility_id = $1
`

// description: List all locations within a facility
func (q *Queries) ListFacilityLocationsByFacility(ctx context.Context, facilityID int64) ([]FacilityLocation, error) {
	rows, err := q.db.QueryContext(ctx, listFacilityLocationsByFacility, facilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FacilityLocation{}
	for rows.Next() {
		var i FacilityLocation
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.FacilityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
